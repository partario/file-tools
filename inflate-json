#!/usr/bin/env python

from __future__ import print_function

from io import IOBase
from json.decoder import WHITESPACE

import gzip
import json
import sys

# JSON objects are, technically, unordered, but it's convenient to preserve
# the original order when "inflating".
# The json module doesn't support object_pairs_hook until Python 2.7 and 3.1
vers = sys.version_info[0:2]
if vers < (2, 7) or vers == (3, 0):
    ordered = False
else:
    from collections import OrderedDict
    ordered = True

if vers[0] < 3:
    def is_file(string_or_fp):
        return isinstance(string_or_fp, file)
else:
    def is_file(string_or_fp):
        return isinstance(string_or_fp, IOBase)


def iterload(string_or_fp, cls=json.JSONDecoder, **kwargs):
    """Returns one JSON object at a time"""
    # This is my favorite answer from:
    # http://stackoverflow.com/questions/6886283/how-i-can-i-lazily-read-multiple-json-objects-from-a-file-stream-in-python
    if is_file(string_or_fp):
        string = string_or_fp.read()
    else:
        string = str(string_or_fp)

    decoder = cls(**kwargs)
    idx = WHITESPACE.match(string, 0).end()
    while idx < len(string):
        obj, end = decoder.raw_decode(string, idx)
        yield obj
        idx = WHITESPACE.match(string, end).end()


def reform_json(f, ordered=False):
    if ordered:
        it = iterload(f, object_pairs_hook=OrderedDict)
    else:
        it = iterload(f)
    for obj in it:
        print(json.dumps(obj, indent=4))


if len(sys.argv) == 1:
    with sys.stdin as f:
        reform_json(f, ordered)
else:
    for file_ in sys.argv[1:]:
        if file_.endswith('.gz'):
            # for 2.6 compatibility, we assume the gzip module doesn't support "with"
            try:
                f = gzip.open(file_, 'r')
                reform_json(f, ordered)
            finally:
                f.close()
        else:
            with open(file_) as f:
                reform_json(f, ordered)

