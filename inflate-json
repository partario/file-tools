#!/usr/bin/env python

"""inflate-json

Reads JSON objects from a file or from stdin
and writes them to stdout with indentation added for readability.

Copyright (c) 2020 Rod Hoon
"""

from __future__ import print_function

import json
import sys

# json doesn't support object_pairs_hook until Python 2.7 and 3.1
vers = sys.version_info[0:2]
if vers < (2, 7) or vers == (3, 0):
    ordered = False
else:
    from collections import OrderedDict
    ordered = True

# My favorite answer from:
# http://stackoverflow.com/questions/6886283/how-i-can-i-lazily-read-multiple-json-objects-from-a-file-stream-in-python
from json.decoder import WHITESPACE
def iterload(string_or_fp, cls=json.JSONDecoder, **kwargs):
    """A generator which breaks a file or string into a series of JSON items"""
    if isinstance(string_or_fp, file):
        string = string_or_fp.read()
    else:
        string = str(string_or_fp)

    decoder = cls(**kwargs)
    idx = WHITESPACE.match(string, 0).end()
    while idx < len(string):
        obj, end = decoder.raw_decode(string, idx)
        yield obj
        idx = WHITESPACE.match(string, end).end()

def inflate_json(f, ordered=False):
    """Adds indentation to JSON objects for readability"""
    if ordered:
        it = iterload(f, object_pairs_hook=OrderedDict)
    else:
        it = iterload(f)
    for obj in it:
        print(json.dumps(obj, indent=4))

if len(sys.argv) == 1:
    with sys.stdin as f:
        inflate_json(f, ordered)
else:
    for file_ in sys.argv[1:]:
        with open(file_) as f:
            inflate_json(f, ordered)

# vim: ts=4 sw=4 ai sr et com=
